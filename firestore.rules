
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Allow public read on produce listings and loan providers
    match /Produce/{produceId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == request.resource.data.farmer_id; // Only owner can write
    }
    
    match /LoanProviders/{providerId} {
        allow read: if true;
        allow write: if false; // Admin-only from console
    }

    // Rules for User profiles
    match /Users/{userId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
    }
    
    // Rules for Loan Applications
    match /LoanApplications/{applicationId} {
        // A farmer can create their own loan application
        allow create: if request.auth != null && request.auth.uid == request.resource.data.farmer_id;
        
        // A farmer can read their own loan applications
        allow read: if request.auth != null && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.role == 'farmer' && resource.data.farmer_id == request.auth.uid;

        // An admin/provider can read all and update status (simplified)
        // In a real app, you'd check for a specific 'provider' role
        allow read, update: if request.auth != null && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for Transactions
    match /Transactions/{transactionId} {
        // Anyone authenticated can create a transaction (e.g. a buyer)
        allow create: if request.auth != null;

        // Only the participating farmer can read their transactions
        allow read: if request.auth != null && resource.data.farmer_id == request.auth.uid;
    }
  }
}
