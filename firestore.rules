
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user has a specific role
    function hasRole(role) {
        return isAuthenticated() && get(/databases/$(database)/documents/Users/$(request.auth.uid)).data.role == role;
    }

    // Users can only read/write their own profile
    match /Users/{userId} {
      allow read, update, delete: if request.auth.uid == userId;
      allow create: if isAuthenticated();
    }

    // Anyone can read listings, but only farmers can create/update/delete them
    match /ProduceListings/{listingId} {
        allow read: if true;
        allow create, update, delete: if hasRole('farmer');
    }

    // Anyone can read loan providers
    match /LoanProviders/{providerId} {
        allow read: if true;
        // Admins/internal staff would have write access
        allow write: if false; // Lock down for now
    }

    // Farmers can create their own loan applications
    // They can only read their own applications
    match /LoanApplications/{applicationId} {
        allow create: if hasRole('farmer') && request.resource.data.farmer_id == request.auth.uid;
        allow read: if request.resource.data.farmer_id == request.auth.uid || hasRole('provider'); // Or a provider role
        
        // Providers can update status (approve/reject), farmers cannot
        allow update: if hasRole('provider') && !(request.resource.data.amount is number); // simplified provider role check
    }

    // Transactions can be created, but not easily read/modified by clients
    // This would typically be handled by backend logic (e.g. Cloud Functions)
    match /Transactions/{transactionId} {
        allow read, write: if false; // Locked down, managed by server
    }
  }
}
